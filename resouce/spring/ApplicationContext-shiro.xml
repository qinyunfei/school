<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
	">


	<!-- 认证器 ModularRealmAuthenticator多Realm时的认证器 -->
	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<!--认证策略 -->
		<property name="authenticationStrategy">
			<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
		</property>
	</bean>


	<!-- 自定义授权器 ModularRealmAuthorizer多Realm时的授权器 -->
	<bean id="authorizer" class="org.apache.shiro.authz.ModularRealmAuthorizer">
		<!-- PermissionResolver用于解析权限字符串到Permission实例 就是字符串的解析规则 -->
		<property name="permissionResolver">
			<bean
				class="sgg.qin.framework.shiro.permission.BitAndWildPermissionResolver"></bean>
		</property>
		<!--RolePermissionResolver用于根据角色解析相应的权限集合 默认没有任何实现 -->
		<property name="rolePermissionResolver">
			<bean class="sgg.qin.framework.shiro.permission.MyRolePermissionResolver"></bean>
		</property>
	</bean>



	<!-- 自定义凭证匹配器 实现了登陆次数的验证 密码匹配策略 -->
	<bean id="credentialsMatcher"
		class="sgg.qin.framework.shiro.credentials.RetryLimitHashedCredentialsMatcher">
		<constructor-arg ref="cacheManager" /><!-- 由于是自定义的凭证匹配器用到了缓存 
			设置构造参数 -->
		<property name="hashAlgorithmName" value="md5" /><!--指定hash算法为MD5； -->
		<property name="hashIterations" value="10" /> <!--指定散列次数为2次 -->
		<property name="storedCredentialsHexEncoded" value="true" /> <!--指定Hash散列值使用Hex加密存储。value="false"表明hash散列值用用Base64-encoded存储 -->
	</bean>

	<!-- Realm实现 -->
	<bean id="userRealm" class="sgg.qin.framework.shiro.realm.UserRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher" /><!--设置凭证匹配器 -->
		<property name="cachingEnabled" value="false" /><!--是否启用缓存，默认false -->
		<!--<property name="authenticationCachingEnabled" value="true"/> --><!-- 启用身份验证缓存，即缓存AuthenticationInfo信息，默认false -->
		<!--<property name="authenticationCacheName" value="authenticationCache"/> --><!--启用授权缓存，即缓存AuthorizationInfo信息，默认false -->
	</bean>

	<!-- rememberMeCookie模板 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!--设置Cookie名字 -->
		<constructor-arg value="rememberMe" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="2592000" /><!-- 30天 -->
	</bean>

	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
		<property name="cipherKey"
			value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>

	<!-- sessionCookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!--设置Cookie名字 默认为JSESSIONID -->
		<constructor-arg value="JSESSIONID" />
		<!--设置为true，则客户端不会暴露给客户端脚本代码 -->
		<property name="httpOnly" value="true" />
		<!--设置Cookie的过期时间 秒为单位-->
		<property name="maxAge" value="1800" />
	</bean>

	<!-- 会话ID生成器 -->
	<bean id="sessionIdGenerator"
		class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

	<!-- 会话DAO 可以自定义自己的sessionDAO -->
	<bean id="sessionDAO"
		class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<!--设置Session缓存名字 默认就是它 -->
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache" />
		<!--设置会话ID生成器 默认就是它 -->
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
	</bean>

	<!-- 会话验证调度器 有jdk和quartz两种方式 -->
	<bean id="sessionValidationScheduler"
		class="sgg.qin.framework.shiro.quartz.QuartzSessionValidationScheduler">
		<!--设置调度时间间隔 -->
		<property name="sessionValidationInterval" value="100" />
		<!--设置会话验证调度器进行会话验证时的会话管理器 -->
		<property name="sessionManager" ref="sessionManager" />
	</bean>
	
	<!--会话监听器  -->
	<bean id="sessionListener" class="sgg.qin.framework.shiro.session.MySessionListener"></bean>

	<!-- 会话管理器 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!--会话的全局过期时间 默认30分钟（1800000） 毫秒为单位-->
		<property name="globalSessionTimeout" value="1800000" />
		<!--会话过期时是否删除过期的会话 默认是开启 -->
		<property name="deleteInvalidSessions" value="true" />
		<!--是否开启会话验证器 ,默认是开启的 -->
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<!--设置会话验证调度器，默认就是使用 -->
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<!--设置sessionDAO -->
		<property name="sessionDAO" ref="sessionDAO" />
		<!--是否启用/禁用Session Id Cookie -->
		<property name="sessionIdCookieEnabled" value="true" />
		<!--设置Cookie模版 -->
		<property name="sessionIdCookie" ref="sessionIdCookie" />
		<!--会话监听器  -->
		<property name="sessionListeners" ref="sessionListener" />
	</bean>



	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 认证器 -->
		<property name="authenticator" ref="authenticator" />
		<!-- 授权器 -->
		<property name="authorizer" ref="authorizer" />
		<!-- Realm实现 -->
		<property name="realms" ref="userRealm" />
		<!-- 缓存控制器 -->
		<property name="cacheManager" ref="cacheManager" />
		<!-- rememberMe管理器 -->
		<property name="rememberMeManager" ref="rememberMeManager" />
		<!-- 会话管理器 -->
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

	<!-- 基于Form表单的身份验证过滤器 -->
	<bean id="formAuthenticationFilter"
		class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<property name="usernameParam" value="username" />
		<property name="passwordParam" value="password" />
		<property name="rememberMeParam" value="rememberMe" /><!-- rememberMeParam，即rememberMe请求参数名，请求参数是boolean类型，true表示rememberMe -->
		<property name="loginUrl" value="/login" />
	</bean>

	<!-- Shiro的Web过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login" />
		<property name="filters">
			<util:map>
				<entry key="authc" value-ref="formAuthenticationFilter" />
			</util:map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/login = authc
				/logout = logout
				/authenticated = authc
				/assets/**= anon
				/** = authc
			</value>
		</property>
	</bean>

	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

</beans>
